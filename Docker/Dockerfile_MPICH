FROM ubuntu:focal

##################################################
# Essential packages and libraries               #
##################################################

# get essential packages
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    software-properties-common \
    apt-transport-https \
    build-essential \
    ca-certificates \
    curl \
    openssl \
    rsync \
    wget \
    gfortran \
    git \
    libgmp-dev \
    libhdf5-dev \
    clang \
    libclang-dev \
    libpython3.8-dev \
    libmkl-full-dev \
    libboost-dev \
    sudo \
    openssh-client \
    gpg-agent \
    python3-pip \
    python3-setuptools \
    libfftw3-dev \
    binutils \
    libnfft3-dev \
    zlib1g-dev \
    less \
    nano \
    vim \
    # Jupyter lab packages
    texlive \
    dvipng \
    texlive-latex-extra \
    texlive-fonts-recommended \
    nodejs \
    npm \
    && \
    apt-get autoremove --purge -y && \
    apt-get autoclean -y && \
    rm -rf /var/cache/apt/* /var/lib/apt/lists/*

# Necessary to install cmake through pip. There is a bug in the apt version (status 2020/09/11)
RUN pip3 install --no-cache-dir cmake==3.14.3
ENV PATH=/usr/local/bin:${PATH}
ENV PYTHONPATH=/triqs/lib/python3.8/site-packages:${PYTHONPATH}

# MPICH 3.3.2
RUN cd && wget -q http://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz \
    && tar xf mpich-3.3.2.tar.gz \
    && cd mpich-3.3.2 \
    && ./configure --enable-fast=all,O3 --prefix=/usr \
    && make -j$(nproc) \
    && make install \
    && ldconfig \
    && cd .. \
    && rm -rf mpich-3.3.2 \
    && rm mpich-3.3.2.tar.gz

##################################################
# Python modules                                 #
##################################################

# Install python packages
RUN pip3 install --no-cache-dir \
    cython \
    numpy \
    scipy \
    matplotlib \
    decorator \
    jupyter \
    ipywidgets \
    pytest \
    pandas \
    shapely \
    monty \
    mpi4py \
    pymatgen \
    Jinja2 \
    Mako \
    tornado \
    zmq \
    notebook \
    tk \
    # Jupyter lab packages
    jupyterlab \
    descartes \
    ipympl \
    RISE 

# jupyter lab extension
RUN jupyter-labextension install @jupyter-widgets/jupyterlab-manager jupyter-matplotlib @jupyterlab/toc
RUN jupyter-lab build

##################################################
# TRIQS and its packages                         #
##################################################

# set some compiler flags
ENV CFLAGS="-m64 -O3 -Wl,--no-as-needed"
ENV CXXFLAGS="-m64 -O3 -Wl,--no-as-needed"
ENV LDFLAGS="-ldl -lm"
ENV FFLAGS="-m64 -O3"

# triqs
RUN cd / && mkdir -p triqs && mkdir -p source

RUN cd /source && git clone -b 3.0.0 --depth 1 https://github.com/TRIQS/triqs triqs.src \
    && mkdir -p triqs.build && cd triqs.build \
    && cmake ../triqs.src -DCMAKE_INSTALL_PREFIX=/triqs \
       -DBLAS_LIBRARIES=/lib/x86_64-linux-gnu/libmkl_rt.so \
       -DLIBCLANG_LOCATION=/usr/lib/llvm-10/lib/libclang.so \
    && make -j$(nproc) && make -j$(nproc) test && make install

ENV CPATH=/triqs/include:${CPATH}
ENV PATH=/triqs/bin:${PATH}
ENV LIBRARY_PATH=/triqs/lib:${LIBRARY_PATH}
ENV LD_LIBRARY_PATH=/triqs/lib:${LD_LIBRARY_PATH}
ENV PYTHONPATH=/triqs/lib/python3.8/site-packages:${PYTHONPATH}
ENV CMAKE_PREFIX_PATH=/triqs/share/cmake:${CMAKE_PREFIX_PATH}
ENV TRIQS_ROOT=/triqs

# dft_tools
RUN cd /source && git clone -b 3.0.0 --depth 1 https://github.com/TRIQS/dft_tools.git dft_tools.src \
    && mkdir -p dft_tools.build && cd dft_tools.build \
    && cmake ../dft_tools.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make && make -j$(nproc) test && make install

# cthyb
RUN cd /source && git clone -b 3.0.0 --depth 1 https://github.com/TRIQS/cthyb.git cthyb.src \
    && mkdir -p cthyb.build && cd cthyb.build \
    && cmake ../cthyb.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make -j$(nproc) && make -j$(nproc) test && make install

# maxent
RUN cd /source && git clone -b 1.0.0 --depth 1 https://github.com/TRIQS/maxent.git maxent.src \
    && mkdir -p maxent.build && cd maxent.build \
    && cmake ../maxent.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make -j$(nproc) && make -j$(nproc) test && make install

##################################################
# Wannier90 and VASP                             #
##################################################

# W90
# Uncomment the lines in this and the following VASP block to have W90 as a library in VASP, allowing for the tag LWANNIER90=.TRUE.
RUN cd / && git clone -b v2.1 https://github.com/wannier-developers/wannier90.git wannier90 \
    && cd /wannier90 \
    # Using gfortran compiler - same as mpif90, mpif90 just links to it anyways
    && cp ./config/make.inc.gfort ./make.inc \
    # Make gfort use the intel libraries
    && sed -i 's@^LIBS.*@LIBS = -L${MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread -lm -ldl@' ./make.inc \
    && make default lib

# VASP for CSC calculations
ADD csc_vasp.tar.gz /vasp/
# Set flags for W90 in the makefile.include
RUN cd /vasp/ && echo 'LLIBS += /wannier90/libwannier.a' >> makefile.include \
    && ex -s -c '9i|CPP_OPTIONS += -DVASP2WANNIER90v2' -c x makefile.include
# Install vasp
RUN cd /vasp/ \
    && make std \
    && rm -rf src/ build/ arch/

ENV PATH=/vasp/bin:${PATH}

##################################################
# Cleanup                                        #
##################################################

# remove source
RUN cd / && rm -rf source

# create a useful work dir
RUN cd / && mkdir work && cd work

# make sure openmp does not start
ENV OMP_NUM_THREADS=1

# expose port for jupyter
EXPOSE 8378

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
COPY jupyter_start.sh /usr/local/bin/jupyter.sh

RUN ["chmod", "+x", "/usr/local/bin/entrypoint.sh"]
RUN ["chmod", "+x", "/usr/local/bin/jupyter.sh"]

# change user and group id to match host machine if options are passed accordingly
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
